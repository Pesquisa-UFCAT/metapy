######################################################################
# UNIVERSIDADE FEDERAL DE CATALÃO (UFCAT)
# WANDERLEI MALAQUIAS PEREIRA JUNIOR,        ENG. CIVIL / PROF (UFCAT)
# FRAN SÉRGIO LOBATO,                        ENG. QUIMÍCO / PROF (UFU)
######################################################################

######################################################################
# DESCRIÇÃO ALGORITMO:
# BIBLIO. DE FUNÇÕES COMUNS PARA O ALGORITMO DE COLÔNIA DE VAGALUMES
######################################################################

################################################################################
# BIBLIOTECAS NATIVAS PYTHON
import numpy as np

################################################################################
# BIBLIOTECAS DESENVOLVEDORES GPEE
import META_COMMON_LIBRARY as META_CL

# CHAOTIC SEARCH
def CHAOTIC_SEARCH(OF_FUNCTION, ITER, X_BEST, OF_BEST, FIT_BEST, N_CHAOTICSEARCHS, ALPHA_CHAOTIC, D, N_ITER, X_L, X_U, NULL_DIC):
    # INITIALIZATION VARIABLES
    K = N_CHAOTICSEARCHS
    CH = []
    X_BESTNEW = X_BEST
    OF_BESTNEW = OF_BEST
    FIT_BESTNEW = FIT_BEST
    # CSI UPDATE
    CSI = (N_ITER - ITER + 1) / N_ITER
    # CHAOTIC SEARCHS
    for I_COUNT in range(0, K):
        CH_XBEST = np.zeros((1, D))
        X_BESTTEMPORARY = np.zeros((1, D))
        if I_COUNT == 0:
            # CHAOTIC UPDATE
            CH.append(np.random.random())
        else:
            # CHAOTIC UPDATE POSITION, OF AND FIT
            CH.append(ALPHA_CHAOTIC * CH[I_COUNT - 1] * (1 - CH[I_COUNT - 1]))
        # CREATING THE CHAOTIC POSITION
        for J_COUNT in range(D): 
            CH_XBEST[0, J_COUNT] = X_L[J_COUNT] + (X_U[J_COUNT] - X_L[J_COUNT]) * CH[I_COUNT]
            # print('aqui', type(X_BESTNEW), X_BESTNEW)
            X_BESTTEMPORARY[0, J_COUNT] = (1 - CSI) * X_BESTNEW[J_COUNT] + CSI * CH_XBEST[0, J_COUNT]
        X_BESTTEMPORARY[0, :] = META_CL.CHECK_INTERVAL(X_BESTTEMPORARY[0, :], X_L, X_U) 
        OF_BESTTEMPORARY = OF_FUNCTION(X_BESTTEMPORARY[0, :], NULL_DIC)
        FIT_BESTTEMPORARY = META_CL.FIT_VALUE(OF_BESTTEMPORARY)
        # STORING BEST VALUE
        if FIT_BESTTEMPORARY > FIT_BEST:
            X_BESTNEW = X_BESTTEMPORARY[0, :]
            OF_BESTNEW = OF_BESTTEMPORARY
            FIT_BESTNEW = FIT_BESTTEMPORARY
    return X_BESTNEW, OF_BESTNEW, FIT_BESTNEW

# CALCULATION OF THE DISCRIMINATING FACTOR OF THE MALE AND FEMALE FIREFLIES POPULATION
def DISCRIMINANT_FACTOR_MALE_MOVIMENT(FIT_XI, FIT_YK):
    """ COMENTÁRIO NATIVO VOU FAZER"""
    # COMPARISON OF FIREFLY BRIGHTNESS
    if FIT_XI > FIT_YK:
        D_1 = 1
    else:
        D_1 = -1
    return D_1

# CALCULATION OF ATTRACTIVENESS AMONG FIREFLIES
def ATTRACTIVENESS_FIREFLY_PARAMETER(BETA_0, GAMMA, X_I, X_J, D):
    # DISTANCE BETWEEN X_I AND X_J FIREFLIES
    AUX_1 = 0
    for I_COUNT in range(D):
        AUX_1 += (X_I[I_COUNT] - X_J[I_COUNT]) ** 2
    R_IJ = np.sqrt(AUX_1)
    # BETA ATTRACTIVENESS
    BETA = []
    for J_COUNT in range(D):
        BETA.append(BETA_0 * np.exp(- GAMMA[J_COUNT] * R_IJ))
    return BETA

# MALE FIREFLY MOVEMENT
def MALE_FIREFLY_MOVEMENT(OF_FUNCTION, X_MALECURRENTI, FIT_MALECURRENTI, Y_FEMALECURRENTK, FIT_FEMALECURRENTK, Y_FEMALECURRENTJ, FIT_FEMALECURRENTJ, BETA_0, GAMMA, D, X_L, X_U, NULL_DIC):
    """ COMENTÁRIO NATIVO VOU FAZER"""
    # INITIALIZATION VARIABLES
    SECOND_TERM = []
    THIRD_TERM = []
    X_MALENEWI = []
    # DISCRIMINANT D FACTOR
    D_1 = DISCRIMINANT_FACTOR_MALE_MOVIMENT(FIT_MALECURRENTI, FIT_FEMALECURRENTK)
    D_2 = DISCRIMINANT_FACTOR_MALE_MOVIMENT(FIT_MALECURRENTI, FIT_FEMALECURRENTJ)
    # ATTRACTIVENESS AMONG FIREFLIES
    BETA_1 = ATTRACTIVENESS_FIREFLY_PARAMETER(BETA_0, GAMMA, X_MALECURRENTI, Y_FEMALECURRENTK, D)
    BETA_2 = ATTRACTIVENESS_FIREFLY_PARAMETER(BETA_0, GAMMA, X_MALECURRENTI, Y_FEMALECURRENTJ, D)
    # LAMBDA AND MU RANDOM PARAMETERS
    LAMBDA = np.random.random()
    MU = np.random.random()
    for I_COUNT in range(D):
        SECOND_TERM.append(D_1 * BETA_1[I_COUNT] * LAMBDA * (Y_FEMALECURRENTK[I_COUNT] - X_MALECURRENTI[I_COUNT]))
        THIRD_TERM.append(D_2 * BETA_2[I_COUNT] * MU * (Y_FEMALECURRENTJ[I_COUNT] - X_MALECURRENTI[I_COUNT]))
    # UPDATE FEMALE POSITION, OF AND FIT
    for J_COUNT in range(D):
        X_MALENEWI.append(X_MALECURRENTI[J_COUNT] + SECOND_TERM[J_COUNT] + THIRD_TERM[J_COUNT])
    X_MALENEWI = META_CL.CHECK_INTERVAL(X_MALENEWI, X_L, X_U) 
    OF_MALENEWI = OF_FUNCTION(X_MALENEWI, NULL_DIC)
    FIT_MALENEWI = META_CL.FIT_VALUE(OF_MALENEWI)
    return X_MALENEWI, OF_MALENEWI, FIT_MALENEWI

# FEMALE FIREFLY MOVEMENT
def FEMALE_FIREFLY_MOVEMENT(OF_FUNCTION, Y_FEMALECURRENTI, X_MALEBEST, FIT_MALEBEST, BETA_0, GAMMA, D, X_L, X_U, NULL_DIC):
    """ COMENTÁRIO NATIVO VOU FAZER"""
    # INITIALIZATION VARIABLES
    Y_FEMALENEWI = []
    # ATTRACTIVENESS AMONG FIREFLIES (Y_FEMALE AND X_BEST)
    BETA = ATTRACTIVENESS_FIREFLY_PARAMETER(BETA_0, GAMMA, Y_FEMALECURRENTI, X_MALEBEST, D)
    # PHI RANDOM PARAMETER
    PHI = np.random.random()
    # UPDATE FEMALE POSITION, OF AND FIT
    for I_COUNT in range(D):
        Y_FEMALENEWI.append(Y_FEMALECURRENTI[I_COUNT] + BETA[I_COUNT] * PHI * (X_MALEBEST[I_COUNT] - Y_FEMALECURRENTI[I_COUNT]))
    Y_FEMALENEWI = META_CL.CHECK_INTERVAL(Y_FEMALENEWI, X_L, X_U)
    OF_FEMALENEWI = OF_FUNCTION(Y_FEMALENEWI, NULL_DIC)
    FIT_FEMALENEWI = META_CL.FIT_VALUE(OF_FEMALENEWI)
    return Y_FEMALENEWI, OF_FEMALENEWI, FIT_FEMALENEWI

# 
def GAMMA_ASSEMBLY(X_L, X_U, D, M):
    GAMMA = []
    for I_COUNT in range(D):
        GAMMA_VALUE = X_U[0] - X_L[0]
        GAMMA.append(1 / GAMMA_VALUE ** M)
    return GAMMA